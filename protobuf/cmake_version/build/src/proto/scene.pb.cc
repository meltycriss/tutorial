// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: scene.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace scene {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uav_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uav_reflection_ = NULL;
const ::google::protobuf::Descriptor* Polytope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Polytope_reflection_ = NULL;
const ::google::protobuf::Descriptor* Uavs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Uavs_reflection_ = NULL;
const ::google::protobuf::Descriptor* DynamicObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DynamicObstacles_reflection_ = NULL;
const ::google::protobuf::Descriptor* StaticObstacles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StaticObstacles_reflection_ = NULL;
const ::google::protobuf::Descriptor* UavsDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UavsDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* GDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* A_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  A_reflection_ = NULL;
const ::google::protobuf::Descriptor* B_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  B_reflection_ = NULL;
const ::google::protobuf::Descriptor* Scene_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Scene_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_scene_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_scene_2eproto() {
  protobuf_AddDesc_scene_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "scene.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      -1);
  Uav_descriptor_ = file->message_type(1);
  static const int Uav_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uav, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uav, y_),
  };
  Uav_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uav_descriptor_,
      Uav::default_instance_,
      Uav_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uav, _has_bits_[0]),
      -1,
      -1,
      sizeof(Uav),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uav, _internal_metadata_),
      -1);
  Polytope_descriptor_ = file->message_type(2);
  static const int Polytope_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polytope, point_),
  };
  Polytope_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Polytope_descriptor_,
      Polytope::default_instance_,
      Polytope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polytope, _has_bits_[0]),
      -1,
      -1,
      sizeof(Polytope),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Polytope, _internal_metadata_),
      -1);
  Uavs_descriptor_ = file->message_type(3);
  static const int Uavs_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uavs, uav_),
  };
  Uavs_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Uavs_descriptor_,
      Uavs::default_instance_,
      Uavs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uavs, _has_bits_[0]),
      -1,
      -1,
      sizeof(Uavs),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Uavs, _internal_metadata_),
      -1);
  DynamicObstacles_descriptor_ = file->message_type(4);
  static const int DynamicObstacles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacles, do__),
  };
  DynamicObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DynamicObstacles_descriptor_,
      DynamicObstacles::default_instance_,
      DynamicObstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacles, _has_bits_[0]),
      -1,
      -1,
      sizeof(DynamicObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacles, _internal_metadata_),
      -1);
  StaticObstacles_descriptor_ = file->message_type(5);
  static const int StaticObstacles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacles, so_),
  };
  StaticObstacles_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StaticObstacles_descriptor_,
      StaticObstacles::default_instance_,
      StaticObstacles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacles, _has_bits_[0]),
      -1,
      -1,
      sizeof(StaticObstacles),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacles, _internal_metadata_),
      -1);
  UavsDir_descriptor_ = file->message_type(6);
  static const int UavsDir_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavsDir, uavdir_),
  };
  UavsDir_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UavsDir_descriptor_,
      UavsDir::default_instance_,
      UavsDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavsDir, _has_bits_[0]),
      -1,
      -1,
      sizeof(UavsDir),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UavsDir, _internal_metadata_),
      -1);
  GDir_descriptor_ = file->message_type(7);
  static const int GDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GDir, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GDir, y_),
  };
  GDir_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      GDir_descriptor_,
      GDir::default_instance_,
      GDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GDir, _has_bits_[0]),
      -1,
      -1,
      sizeof(GDir),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GDir, _internal_metadata_),
      -1);
  A_descriptor_ = file->message_type(8);
  static const int A_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A, col_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A, data_),
  };
  A_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      A_descriptor_,
      A::default_instance_,
      A_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A, _has_bits_[0]),
      -1,
      -1,
      sizeof(A),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(A, _internal_metadata_),
      -1);
  B_descriptor_ = file->message_type(9);
  static const int B_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(B, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(B, data_),
  };
  B_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      B_descriptor_,
      B::default_instance_,
      B_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(B, _has_bits_[0]),
      -1,
      -1,
      sizeof(B),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(B, _internal_metadata_),
      -1);
  Scene_descriptor_ = file->message_type(10);
  static const int Scene_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, uavs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, dos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, sos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, uavsdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, gdir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, b_),
  };
  Scene_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Scene_descriptor_,
      Scene::default_instance_,
      Scene_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _has_bits_[0]),
      -1,
      -1,
      sizeof(Scene),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Scene, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_scene_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uav_descriptor_, &Uav::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Polytope_descriptor_, &Polytope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Uavs_descriptor_, &Uavs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DynamicObstacles_descriptor_, &DynamicObstacles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StaticObstacles_descriptor_, &StaticObstacles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UavsDir_descriptor_, &UavsDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      GDir_descriptor_, &GDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      A_descriptor_, &A::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      B_descriptor_, &B::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Scene_descriptor_, &Scene::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_scene_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete Uav::default_instance_;
  delete Uav_reflection_;
  delete Polytope::default_instance_;
  delete Polytope_reflection_;
  delete Uavs::default_instance_;
  delete Uavs_reflection_;
  delete DynamicObstacles::default_instance_;
  delete DynamicObstacles_reflection_;
  delete StaticObstacles::default_instance_;
  delete StaticObstacles_reflection_;
  delete UavsDir::default_instance_;
  delete UavsDir_reflection_;
  delete GDir::default_instance_;
  delete GDir_reflection_;
  delete A::default_instance_;
  delete A_reflection_;
  delete B::default_instance_;
  delete B_reflection_;
  delete Scene::default_instance_;
  delete Scene_reflection_;
}

void protobuf_AddDesc_scene_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_scene_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013scene.proto\022\005scene\"\035\n\005Point\022\t\n\001x\030\001 \002(\001"
    "\022\t\n\001y\030\002 \002(\001\"\033\n\003Uav\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001"
    "\"\'\n\010Polytope\022\033\n\005point\030\001 \003(\0132\014.scene.Poin"
    "t\"\037\n\004Uavs\022\027\n\003uav\030\001 \003(\0132\n.scene.Uav\"/\n\020Dy"
    "namicObstacles\022\033\n\002do\030\001 \003(\0132\017.scene.Polyt"
    "ope\".\n\017StaticObstacles\022\033\n\002so\030\001 \003(\0132\017.sce"
    "ne.Polytope\"\'\n\007UavsDir\022\034\n\006uavDir\030\001 \003(\0132\014"
    ".scene.Point\"\034\n\004GDir\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002"
    "(\001\"+\n\001A\022\013\n\003row\030\001 \002(\005\022\013\n\003col\030\002 \002(\005\022\014\n\004dat"
    "a\030\003 \003(\001\"\036\n\001B\022\013\n\003row\030\001 \002(\005\022\014\n\004data\030\002 \003(\001\""
    "\323\001\n\005Scene\022\031\n\004uavs\030\001 \002(\0132\013.scene.Uavs\022$\n\003"
    "dos\030\002 \002(\0132\027.scene.DynamicObstacles\022#\n\003so"
    "s\030\003 \002(\0132\026.scene.StaticObstacles\022\037\n\007uavsD"
    "ir\030\004 \002(\0132\016.scene.UavsDir\022\031\n\004gDir\030\005 \002(\0132\013"
    ".scene.GDir\022\023\n\001a\030\006 \002(\0132\010.scene.A\022\023\n\001b\030\007 "
    "\002(\0132\010.scene.B", 613);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "scene.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  Uav::default_instance_ = new Uav();
  Polytope::default_instance_ = new Polytope();
  Uavs::default_instance_ = new Uavs();
  DynamicObstacles::default_instance_ = new DynamicObstacles();
  StaticObstacles::default_instance_ = new StaticObstacles();
  UavsDir::default_instance_ = new UavsDir();
  GDir::default_instance_ = new GDir();
  A::default_instance_ = new A();
  B::default_instance_ = new B();
  Scene::default_instance_ = new Scene();
  Point::default_instance_->InitAsDefaultInstance();
  Uav::default_instance_->InitAsDefaultInstance();
  Polytope::default_instance_->InitAsDefaultInstance();
  Uavs::default_instance_->InitAsDefaultInstance();
  DynamicObstacles::default_instance_->InitAsDefaultInstance();
  StaticObstacles::default_instance_->InitAsDefaultInstance();
  UavsDir::default_instance_->InitAsDefaultInstance();
  GDir::default_instance_->InitAsDefaultInstance();
  A::default_instance_->InitAsDefaultInstance();
  B::default_instance_->InitAsDefaultInstance();
  Scene::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_scene_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_scene_2eproto {
  StaticDescriptorInitializer_scene_2eproto() {
    protobuf_AddDesc_scene_2eproto();
  }
} static_descriptor_initializer_scene_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:scene.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.Point)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.Point)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.Point)
  return target;
}

int Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:scene.Point)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.Point)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// required double x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Point::x() const {
  // @@protoc_insertion_point(field_get:scene.Point.x)
  return x_;
}
 void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:scene.Point.x)
}

// required double y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Point::y() const {
  // @@protoc_insertion_point(field_get:scene.Point.y)
  return y_;
}
 void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:scene.Point.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uav::kXFieldNumber;
const int Uav::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uav::Uav()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.Uav)
}

void Uav::InitAsDefaultInstance() {
}

Uav::Uav(const Uav& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.Uav)
}

void Uav::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uav::~Uav() {
  // @@protoc_insertion_point(destructor:scene.Uav)
  SharedDtor();
}

void Uav::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Uav::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uav::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uav_descriptor_;
}

const Uav& Uav::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Uav* Uav::default_instance_ = NULL;

Uav* Uav::New(::google::protobuf::Arena* arena) const {
  Uav* n = new Uav;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uav::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.Uav)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Uav, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Uav*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Uav::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.Uav)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.Uav)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.Uav)
  return false;
#undef DO_
}

void Uav::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.Uav)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.Uav)
}

::google::protobuf::uint8* Uav::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.Uav)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.Uav)
  return target;
}

int Uav::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:scene.Uav)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int Uav::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.Uav)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uav::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.Uav)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Uav* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uav>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.Uav)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.Uav)
    MergeFrom(*source);
  }
}

void Uav::MergeFrom(const Uav& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.Uav)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Uav::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.Uav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uav::CopyFrom(const Uav& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.Uav)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uav::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Uav::Swap(Uav* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uav::InternalSwap(Uav* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uav::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uav_descriptor_;
  metadata.reflection = Uav_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uav

// required double x = 1;
bool Uav::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uav::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Uav::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uav::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double Uav::x() const {
  // @@protoc_insertion_point(field_get:scene.Uav.x)
  return x_;
}
 void Uav::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:scene.Uav.x)
}

// required double y = 2;
bool Uav::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uav::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Uav::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uav::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double Uav::y() const {
  // @@protoc_insertion_point(field_get:scene.Uav.y)
  return y_;
}
 void Uav::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:scene.Uav.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polytope::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polytope::Polytope()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.Polytope)
}

void Polytope::InitAsDefaultInstance() {
}

Polytope::Polytope(const Polytope& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.Polytope)
}

void Polytope::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Polytope::~Polytope() {
  // @@protoc_insertion_point(destructor:scene.Polytope)
  SharedDtor();
}

void Polytope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Polytope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Polytope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Polytope_descriptor_;
}

const Polytope& Polytope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Polytope* Polytope::default_instance_ = NULL;

Polytope* Polytope::New(::google::protobuf::Arena* arena) const {
  Polytope* n = new Polytope;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Polytope::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.Polytope)
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Polytope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.Polytope)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scene.Point point = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_point;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.Polytope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.Polytope)
  return false;
#undef DO_
}

void Polytope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.Polytope)
  // repeated .scene.Point point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.Polytope)
}

::google::protobuf::uint8* Polytope::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.Polytope)
  // repeated .scene.Point point = 1;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->point(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.Polytope)
  return target;
}

int Polytope::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.Polytope)
  int total_size = 0;

  // repeated .scene.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Polytope::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.Polytope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Polytope* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Polytope>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.Polytope)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.Polytope)
    MergeFrom(*source);
  }
}

void Polytope::MergeFrom(const Polytope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.Polytope)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  point_.MergeFrom(from.point_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Polytope::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.Polytope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polytope::CopyFrom(const Polytope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.Polytope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polytope::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Polytope::Swap(Polytope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polytope::InternalSwap(Polytope* other) {
  point_.UnsafeArenaSwap(&other->point_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Polytope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Polytope_descriptor_;
  metadata.reflection = Polytope_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Polytope

// repeated .scene.Point point = 1;
int Polytope::point_size() const {
  return point_.size();
}
void Polytope::clear_point() {
  point_.Clear();
}
const ::scene::Point& Polytope::point(int index) const {
  // @@protoc_insertion_point(field_get:scene.Polytope.point)
  return point_.Get(index);
}
::scene::Point* Polytope::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:scene.Polytope.point)
  return point_.Mutable(index);
}
::scene::Point* Polytope::add_point() {
  // @@protoc_insertion_point(field_add:scene.Polytope.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::scene::Point >*
Polytope::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:scene.Polytope.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::scene::Point >&
Polytope::point() const {
  // @@protoc_insertion_point(field_list:scene.Polytope.point)
  return point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uavs::kUavFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uavs::Uavs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.Uavs)
}

void Uavs::InitAsDefaultInstance() {
}

Uavs::Uavs(const Uavs& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.Uavs)
}

void Uavs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Uavs::~Uavs() {
  // @@protoc_insertion_point(destructor:scene.Uavs)
  SharedDtor();
}

void Uavs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Uavs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Uavs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Uavs_descriptor_;
}

const Uavs& Uavs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Uavs* Uavs::default_instance_ = NULL;

Uavs* Uavs::New(::google::protobuf::Arena* arena) const {
  Uavs* n = new Uavs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uavs::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.Uavs)
  uav_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Uavs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.Uavs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scene.Uav uav = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_uav:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_uav()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_uav;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.Uavs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.Uavs)
  return false;
#undef DO_
}

void Uavs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.Uavs)
  // repeated .scene.Uav uav = 1;
  for (unsigned int i = 0, n = this->uav_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uav(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.Uavs)
}

::google::protobuf::uint8* Uavs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.Uavs)
  // repeated .scene.Uav uav = 1;
  for (unsigned int i = 0, n = this->uav_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->uav(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.Uavs)
  return target;
}

int Uavs::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.Uavs)
  int total_size = 0;

  // repeated .scene.Uav uav = 1;
  total_size += 1 * this->uav_size();
  for (int i = 0; i < this->uav_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uav(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uavs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.Uavs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Uavs* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Uavs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.Uavs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.Uavs)
    MergeFrom(*source);
  }
}

void Uavs::MergeFrom(const Uavs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.Uavs)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  uav_.MergeFrom(from.uav_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Uavs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.Uavs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Uavs::CopyFrom(const Uavs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.Uavs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uavs::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->uav())) return false;
  return true;
}

void Uavs::Swap(Uavs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uavs::InternalSwap(Uavs* other) {
  uav_.UnsafeArenaSwap(&other->uav_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Uavs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Uavs_descriptor_;
  metadata.reflection = Uavs_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uavs

// repeated .scene.Uav uav = 1;
int Uavs::uav_size() const {
  return uav_.size();
}
void Uavs::clear_uav() {
  uav_.Clear();
}
const ::scene::Uav& Uavs::uav(int index) const {
  // @@protoc_insertion_point(field_get:scene.Uavs.uav)
  return uav_.Get(index);
}
::scene::Uav* Uavs::mutable_uav(int index) {
  // @@protoc_insertion_point(field_mutable:scene.Uavs.uav)
  return uav_.Mutable(index);
}
::scene::Uav* Uavs::add_uav() {
  // @@protoc_insertion_point(field_add:scene.Uavs.uav)
  return uav_.Add();
}
::google::protobuf::RepeatedPtrField< ::scene::Uav >*
Uavs::mutable_uav() {
  // @@protoc_insertion_point(field_mutable_list:scene.Uavs.uav)
  return &uav_;
}
const ::google::protobuf::RepeatedPtrField< ::scene::Uav >&
Uavs::uav() const {
  // @@protoc_insertion_point(field_list:scene.Uavs.uav)
  return uav_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstacles::kDoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstacles::DynamicObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.DynamicObstacles)
}

void DynamicObstacles::InitAsDefaultInstance() {
}

DynamicObstacles::DynamicObstacles(const DynamicObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.DynamicObstacles)
}

void DynamicObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DynamicObstacles::~DynamicObstacles() {
  // @@protoc_insertion_point(destructor:scene.DynamicObstacles)
  SharedDtor();
}

void DynamicObstacles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DynamicObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DynamicObstacles_descriptor_;
}

const DynamicObstacles& DynamicObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

DynamicObstacles* DynamicObstacles::default_instance_ = NULL;

DynamicObstacles* DynamicObstacles::New(::google::protobuf::Arena* arena) const {
  DynamicObstacles* n = new DynamicObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.DynamicObstacles)
  do__.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DynamicObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.DynamicObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scene.Polytope do = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_do:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_do_()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_do;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.DynamicObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.DynamicObstacles)
  return false;
#undef DO_
}

void DynamicObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.DynamicObstacles)
  // repeated .scene.Polytope do = 1;
  for (unsigned int i = 0, n = this->do__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->do_(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.DynamicObstacles)
}

::google::protobuf::uint8* DynamicObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.DynamicObstacles)
  // repeated .scene.Polytope do = 1;
  for (unsigned int i = 0, n = this->do__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->do_(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.DynamicObstacles)
  return target;
}

int DynamicObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.DynamicObstacles)
  int total_size = 0;

  // repeated .scene.Polytope do = 1;
  total_size += 1 * this->do__size();
  for (int i = 0; i < this->do__size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->do_(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.DynamicObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DynamicObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.DynamicObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.DynamicObstacles)
    MergeFrom(*source);
  }
}

void DynamicObstacles::MergeFrom(const DynamicObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.DynamicObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  do__.MergeFrom(from.do__);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DynamicObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.DynamicObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacles::CopyFrom(const DynamicObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.DynamicObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacles::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->do_())) return false;
  return true;
}

void DynamicObstacles::Swap(DynamicObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstacles::InternalSwap(DynamicObstacles* other) {
  do__.UnsafeArenaSwap(&other->do__);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DynamicObstacles_descriptor_;
  metadata.reflection = DynamicObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicObstacles

// repeated .scene.Polytope do = 1;
int DynamicObstacles::do__size() const {
  return do__.size();
}
void DynamicObstacles::clear_do_() {
  do__.Clear();
}
const ::scene::Polytope& DynamicObstacles::do_(int index) const {
  // @@protoc_insertion_point(field_get:scene.DynamicObstacles.do)
  return do__.Get(index);
}
::scene::Polytope* DynamicObstacles::mutable_do_(int index) {
  // @@protoc_insertion_point(field_mutable:scene.DynamicObstacles.do)
  return do__.Mutable(index);
}
::scene::Polytope* DynamicObstacles::add_do_() {
  // @@protoc_insertion_point(field_add:scene.DynamicObstacles.do)
  return do__.Add();
}
::google::protobuf::RepeatedPtrField< ::scene::Polytope >*
DynamicObstacles::mutable_do_() {
  // @@protoc_insertion_point(field_mutable_list:scene.DynamicObstacles.do)
  return &do__;
}
const ::google::protobuf::RepeatedPtrField< ::scene::Polytope >&
DynamicObstacles::do_() const {
  // @@protoc_insertion_point(field_list:scene.DynamicObstacles.do)
  return do__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObstacles::kSoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObstacles::StaticObstacles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.StaticObstacles)
}

void StaticObstacles::InitAsDefaultInstance() {
}

StaticObstacles::StaticObstacles(const StaticObstacles& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.StaticObstacles)
}

void StaticObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StaticObstacles::~StaticObstacles() {
  // @@protoc_insertion_point(destructor:scene.StaticObstacles)
  SharedDtor();
}

void StaticObstacles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StaticObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticObstacles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StaticObstacles_descriptor_;
}

const StaticObstacles& StaticObstacles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

StaticObstacles* StaticObstacles::default_instance_ = NULL;

StaticObstacles* StaticObstacles::New(::google::protobuf::Arena* arena) const {
  StaticObstacles* n = new StaticObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.StaticObstacles)
  so_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StaticObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.StaticObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scene.Polytope so = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_so:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_so()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_so;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.StaticObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.StaticObstacles)
  return false;
#undef DO_
}

void StaticObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.StaticObstacles)
  // repeated .scene.Polytope so = 1;
  for (unsigned int i = 0, n = this->so_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->so(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.StaticObstacles)
}

::google::protobuf::uint8* StaticObstacles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.StaticObstacles)
  // repeated .scene.Polytope so = 1;
  for (unsigned int i = 0, n = this->so_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->so(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.StaticObstacles)
  return target;
}

int StaticObstacles::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.StaticObstacles)
  int total_size = 0;

  // repeated .scene.Polytope so = 1;
  total_size += 1 * this->so_size();
  for (int i = 0; i < this->so_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->so(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticObstacles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.StaticObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StaticObstacles* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObstacles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.StaticObstacles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.StaticObstacles)
    MergeFrom(*source);
  }
}

void StaticObstacles::MergeFrom(const StaticObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.StaticObstacles)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  so_.MergeFrom(from.so_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StaticObstacles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.StaticObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstacles::CopyFrom(const StaticObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.StaticObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacles::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->so())) return false;
  return true;
}

void StaticObstacles::Swap(StaticObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticObstacles::InternalSwap(StaticObstacles* other) {
  so_.UnsafeArenaSwap(&other->so_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticObstacles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StaticObstacles_descriptor_;
  metadata.reflection = StaticObstacles_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaticObstacles

// repeated .scene.Polytope so = 1;
int StaticObstacles::so_size() const {
  return so_.size();
}
void StaticObstacles::clear_so() {
  so_.Clear();
}
const ::scene::Polytope& StaticObstacles::so(int index) const {
  // @@protoc_insertion_point(field_get:scene.StaticObstacles.so)
  return so_.Get(index);
}
::scene::Polytope* StaticObstacles::mutable_so(int index) {
  // @@protoc_insertion_point(field_mutable:scene.StaticObstacles.so)
  return so_.Mutable(index);
}
::scene::Polytope* StaticObstacles::add_so() {
  // @@protoc_insertion_point(field_add:scene.StaticObstacles.so)
  return so_.Add();
}
::google::protobuf::RepeatedPtrField< ::scene::Polytope >*
StaticObstacles::mutable_so() {
  // @@protoc_insertion_point(field_mutable_list:scene.StaticObstacles.so)
  return &so_;
}
const ::google::protobuf::RepeatedPtrField< ::scene::Polytope >&
StaticObstacles::so() const {
  // @@protoc_insertion_point(field_list:scene.StaticObstacles.so)
  return so_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UavsDir::kUavDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UavsDir::UavsDir()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.UavsDir)
}

void UavsDir::InitAsDefaultInstance() {
}

UavsDir::UavsDir(const UavsDir& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.UavsDir)
}

void UavsDir::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UavsDir::~UavsDir() {
  // @@protoc_insertion_point(destructor:scene.UavsDir)
  SharedDtor();
}

void UavsDir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UavsDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UavsDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UavsDir_descriptor_;
}

const UavsDir& UavsDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

UavsDir* UavsDir::default_instance_ = NULL;

UavsDir* UavsDir::New(::google::protobuf::Arena* arena) const {
  UavsDir* n = new UavsDir;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UavsDir::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.UavsDir)
  uavdir_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UavsDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.UavsDir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .scene.Point uavDir = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_uavDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_uavdir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_uavDir;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.UavsDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.UavsDir)
  return false;
#undef DO_
}

void UavsDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.UavsDir)
  // repeated .scene.Point uavDir = 1;
  for (unsigned int i = 0, n = this->uavdir_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uavdir(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.UavsDir)
}

::google::protobuf::uint8* UavsDir::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.UavsDir)
  // repeated .scene.Point uavDir = 1;
  for (unsigned int i = 0, n = this->uavdir_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->uavdir(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.UavsDir)
  return target;
}

int UavsDir::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.UavsDir)
  int total_size = 0;

  // repeated .scene.Point uavDir = 1;
  total_size += 1 * this->uavdir_size();
  for (int i = 0; i < this->uavdir_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uavdir(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UavsDir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.UavsDir)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const UavsDir* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UavsDir>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.UavsDir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.UavsDir)
    MergeFrom(*source);
  }
}

void UavsDir::MergeFrom(const UavsDir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.UavsDir)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  uavdir_.MergeFrom(from.uavdir_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UavsDir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.UavsDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UavsDir::CopyFrom(const UavsDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.UavsDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UavsDir::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->uavdir())) return false;
  return true;
}

void UavsDir::Swap(UavsDir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UavsDir::InternalSwap(UavsDir* other) {
  uavdir_.UnsafeArenaSwap(&other->uavdir_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UavsDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UavsDir_descriptor_;
  metadata.reflection = UavsDir_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UavsDir

// repeated .scene.Point uavDir = 1;
int UavsDir::uavdir_size() const {
  return uavdir_.size();
}
void UavsDir::clear_uavdir() {
  uavdir_.Clear();
}
const ::scene::Point& UavsDir::uavdir(int index) const {
  // @@protoc_insertion_point(field_get:scene.UavsDir.uavDir)
  return uavdir_.Get(index);
}
::scene::Point* UavsDir::mutable_uavdir(int index) {
  // @@protoc_insertion_point(field_mutable:scene.UavsDir.uavDir)
  return uavdir_.Mutable(index);
}
::scene::Point* UavsDir::add_uavdir() {
  // @@protoc_insertion_point(field_add:scene.UavsDir.uavDir)
  return uavdir_.Add();
}
::google::protobuf::RepeatedPtrField< ::scene::Point >*
UavsDir::mutable_uavdir() {
  // @@protoc_insertion_point(field_mutable_list:scene.UavsDir.uavDir)
  return &uavdir_;
}
const ::google::protobuf::RepeatedPtrField< ::scene::Point >&
UavsDir::uavdir() const {
  // @@protoc_insertion_point(field_list:scene.UavsDir.uavDir)
  return uavdir_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GDir::kXFieldNumber;
const int GDir::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GDir::GDir()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.GDir)
}

void GDir::InitAsDefaultInstance() {
}

GDir::GDir(const GDir& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.GDir)
}

void GDir::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GDir::~GDir() {
  // @@protoc_insertion_point(destructor:scene.GDir)
  SharedDtor();
}

void GDir::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GDir_descriptor_;
}

const GDir& GDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

GDir* GDir::default_instance_ = NULL;

GDir* GDir::New(::google::protobuf::Arena* arena) const {
  GDir* n = new GDir;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GDir::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.GDir)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(GDir, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<GDir*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, y_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool GDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.GDir)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }

      // required double y = 2;
      case 2: {
        if (tag == 17) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.GDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.GDir)
  return false;
#undef DO_
}

void GDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.GDir)
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.GDir)
}

::google::protobuf::uint8* GDir::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.GDir)
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.GDir)
  return target;
}

int GDir::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:scene.GDir)
  int total_size = 0;

  if (has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
int GDir::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.GDir)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GDir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.GDir)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const GDir* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const GDir>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.GDir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.GDir)
    MergeFrom(*source);
  }
}

void GDir::MergeFrom(const GDir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.GDir)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void GDir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.GDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GDir::CopyFrom(const GDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.GDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GDir::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GDir::Swap(GDir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GDir::InternalSwap(GDir* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GDir_descriptor_;
  metadata.reflection = GDir_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GDir

// required double x = 1;
bool GDir::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GDir::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void GDir::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void GDir::clear_x() {
  x_ = 0;
  clear_has_x();
}
 double GDir::x() const {
  // @@protoc_insertion_point(field_get:scene.GDir.x)
  return x_;
}
 void GDir::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:scene.GDir.x)
}

// required double y = 2;
bool GDir::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GDir::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void GDir::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void GDir::clear_y() {
  y_ = 0;
  clear_has_y();
}
 double GDir::y() const {
  // @@protoc_insertion_point(field_get:scene.GDir.y)
  return y_;
}
 void GDir::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:scene.GDir.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int A::kRowFieldNumber;
const int A::kColFieldNumber;
const int A::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

A::A()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.A)
}

void A::InitAsDefaultInstance() {
}

A::A(const A& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.A)
}

void A::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

A::~A() {
  // @@protoc_insertion_point(destructor:scene.A)
  SharedDtor();
}

void A::SharedDtor() {
  if (this != default_instance_) {
  }
}

void A::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* A::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return A_descriptor_;
}

const A& A::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

A* A::default_instance_ = NULL;

A* A::New(::google::protobuf::Arena* arena) const {
  A* n = new A;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void A::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.A)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(A, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<A*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(row_, col_);

#undef ZR_HELPER_
#undef ZR_

  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool A::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.A)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (tag == 16) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        break;
      }

      // repeated double data = 3;
      case 3: {
        if (tag == 25) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_data())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.A)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.A)
  return false;
#undef DO_
}

void A::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.A)
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.A)
}

::google::protobuf::uint8* A::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.A)
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  // repeated double data = 3;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.A)
  return target;
}

int A::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:scene.A)
  int total_size = 0;

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
int A::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.A)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated double data = 3;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void A::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.A)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const A* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const A>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.A)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.A)
    MergeFrom(*source);
  }
}

void A::MergeFrom(const A& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.A)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void A::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void A::CopyFrom(const A& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.A)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void A::Swap(A* other) {
  if (other == this) return;
  InternalSwap(other);
}
void A::InternalSwap(A* other) {
  std::swap(row_, other->row_);
  std::swap(col_, other->col_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata A::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = A_descriptor_;
  metadata.reflection = A_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// A

// required int32 row = 1;
bool A::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void A::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void A::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void A::clear_row() {
  row_ = 0;
  clear_has_row();
}
 ::google::protobuf::int32 A::row() const {
  // @@protoc_insertion_point(field_get:scene.A.row)
  return row_;
}
 void A::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:scene.A.row)
}

// required int32 col = 2;
bool A::has_col() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void A::set_has_col() {
  _has_bits_[0] |= 0x00000002u;
}
void A::clear_has_col() {
  _has_bits_[0] &= ~0x00000002u;
}
void A::clear_col() {
  col_ = 0;
  clear_has_col();
}
 ::google::protobuf::int32 A::col() const {
  // @@protoc_insertion_point(field_get:scene.A.col)
  return col_;
}
 void A::set_col(::google::protobuf::int32 value) {
  set_has_col();
  col_ = value;
  // @@protoc_insertion_point(field_set:scene.A.col)
}

// repeated double data = 3;
int A::data_size() const {
  return data_.size();
}
void A::clear_data() {
  data_.Clear();
}
 double A::data(int index) const {
  // @@protoc_insertion_point(field_get:scene.A.data)
  return data_.Get(index);
}
 void A::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:scene.A.data)
}
 void A::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:scene.A.data)
}
 const ::google::protobuf::RepeatedField< double >&
A::data() const {
  // @@protoc_insertion_point(field_list:scene.A.data)
  return data_;
}
 ::google::protobuf::RepeatedField< double >*
A::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:scene.A.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int B::kRowFieldNumber;
const int B::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

B::B()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.B)
}

void B::InitAsDefaultInstance() {
}

B::B(const B& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.B)
}

void B::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

B::~B() {
  // @@protoc_insertion_point(destructor:scene.B)
  SharedDtor();
}

void B::SharedDtor() {
  if (this != default_instance_) {
  }
}

void B::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* B::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return B_descriptor_;
}

const B& B::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

B* B::default_instance_ = NULL;

B* B::New(::google::protobuf::Arena* arena) const {
  B* n = new B;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void B::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.B)
  row_ = 0;
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool B::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.B)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_data;
        break;
      }

      // repeated double data = 2;
      case 2: {
        if (tag == 17) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_data())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_data;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.B)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.B)
  return false;
#undef DO_
}

void B::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.B)
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->data(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.B)
}

::google::protobuf::uint8* B::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.B)
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // repeated double data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->data(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.B)
  return target;
}

int B::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.B)
  int total_size = 0;

  // required int32 row = 1;
  if (has_row()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }
  // repeated double data = 2;
  {
    int data_size = 0;
    data_size = 8 * this->data_size();
    total_size += 1 * this->data_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void B::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.B)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const B* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const B>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.B)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.B)
    MergeFrom(*source);
  }
}

void B::MergeFrom(const B& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.B)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void B::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void B::CopyFrom(const B& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.B)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool B::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void B::Swap(B* other) {
  if (other == this) return;
  InternalSwap(other);
}
void B::InternalSwap(B* other) {
  std::swap(row_, other->row_);
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata B::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = B_descriptor_;
  metadata.reflection = B_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// B

// required int32 row = 1;
bool B::has_row() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void B::set_has_row() {
  _has_bits_[0] |= 0x00000001u;
}
void B::clear_has_row() {
  _has_bits_[0] &= ~0x00000001u;
}
void B::clear_row() {
  row_ = 0;
  clear_has_row();
}
 ::google::protobuf::int32 B::row() const {
  // @@protoc_insertion_point(field_get:scene.B.row)
  return row_;
}
 void B::set_row(::google::protobuf::int32 value) {
  set_has_row();
  row_ = value;
  // @@protoc_insertion_point(field_set:scene.B.row)
}

// repeated double data = 2;
int B::data_size() const {
  return data_.size();
}
void B::clear_data() {
  data_.Clear();
}
 double B::data(int index) const {
  // @@protoc_insertion_point(field_get:scene.B.data)
  return data_.Get(index);
}
 void B::set_data(int index, double value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:scene.B.data)
}
 void B::add_data(double value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:scene.B.data)
}
 const ::google::protobuf::RepeatedField< double >&
B::data() const {
  // @@protoc_insertion_point(field_list:scene.B.data)
  return data_;
}
 ::google::protobuf::RepeatedField< double >*
B::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:scene.B.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Scene::kUavsFieldNumber;
const int Scene::kDosFieldNumber;
const int Scene::kSosFieldNumber;
const int Scene::kUavsDirFieldNumber;
const int Scene::kGDirFieldNumber;
const int Scene::kAFieldNumber;
const int Scene::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Scene::Scene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:scene.Scene)
}

void Scene::InitAsDefaultInstance() {
  uavs_ = const_cast< ::scene::Uavs*>(&::scene::Uavs::default_instance());
  dos_ = const_cast< ::scene::DynamicObstacles*>(&::scene::DynamicObstacles::default_instance());
  sos_ = const_cast< ::scene::StaticObstacles*>(&::scene::StaticObstacles::default_instance());
  uavsdir_ = const_cast< ::scene::UavsDir*>(&::scene::UavsDir::default_instance());
  gdir_ = const_cast< ::scene::GDir*>(&::scene::GDir::default_instance());
  a_ = const_cast< ::scene::A*>(&::scene::A::default_instance());
  b_ = const_cast< ::scene::B*>(&::scene::B::default_instance());
}

Scene::Scene(const Scene& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:scene.Scene)
}

void Scene::SharedCtor() {
  _cached_size_ = 0;
  uavs_ = NULL;
  dos_ = NULL;
  sos_ = NULL;
  uavsdir_ = NULL;
  gdir_ = NULL;
  a_ = NULL;
  b_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Scene::~Scene() {
  // @@protoc_insertion_point(destructor:scene.Scene)
  SharedDtor();
}

void Scene::SharedDtor() {
  if (this != default_instance_) {
    delete uavs_;
    delete dos_;
    delete sos_;
    delete uavsdir_;
    delete gdir_;
    delete a_;
    delete b_;
  }
}

void Scene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Scene::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Scene_descriptor_;
}

const Scene& Scene::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_scene_2eproto();
  return *default_instance_;
}

Scene* Scene::default_instance_ = NULL;

Scene* Scene::New(::google::protobuf::Arena* arena) const {
  Scene* n = new Scene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Scene::Clear() {
// @@protoc_insertion_point(message_clear_start:scene.Scene)
  if (_has_bits_[0 / 32] & 127u) {
    if (has_uavs()) {
      if (uavs_ != NULL) uavs_->::scene::Uavs::Clear();
    }
    if (has_dos()) {
      if (dos_ != NULL) dos_->::scene::DynamicObstacles::Clear();
    }
    if (has_sos()) {
      if (sos_ != NULL) sos_->::scene::StaticObstacles::Clear();
    }
    if (has_uavsdir()) {
      if (uavsdir_ != NULL) uavsdir_->::scene::UavsDir::Clear();
    }
    if (has_gdir()) {
      if (gdir_ != NULL) gdir_->::scene::GDir::Clear();
    }
    if (has_a()) {
      if (a_ != NULL) a_->::scene::A::Clear();
    }
    if (has_b()) {
      if (b_ != NULL) b_->::scene::B::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Scene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:scene.Scene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .scene.Uavs uavs = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uavs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dos;
        break;
      }

      // required .scene.DynamicObstacles dos = 2;
      case 2: {
        if (tag == 18) {
         parse_dos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sos;
        break;
      }

      // required .scene.StaticObstacles sos = 3;
      case 3: {
        if (tag == 26) {
         parse_sos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uavsDir;
        break;
      }

      // required .scene.UavsDir uavsDir = 4;
      case 4: {
        if (tag == 34) {
         parse_uavsDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uavsdir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_gDir;
        break;
      }

      // required .scene.GDir gDir = 5;
      case 5: {
        if (tag == 42) {
         parse_gDir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gdir()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_a;
        break;
      }

      // required .scene.A a = 6;
      case 6: {
        if (tag == 50) {
         parse_a:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_b;
        break;
      }

      // required .scene.B b = 7;
      case 7: {
        if (tag == 58) {
         parse_b:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_b()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:scene.Scene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:scene.Scene)
  return false;
#undef DO_
}

void Scene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:scene.Scene)
  // required .scene.Uavs uavs = 1;
  if (has_uavs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->uavs_, output);
  }

  // required .scene.DynamicObstacles dos = 2;
  if (has_dos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->dos_, output);
  }

  // required .scene.StaticObstacles sos = 3;
  if (has_sos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sos_, output);
  }

  // required .scene.UavsDir uavsDir = 4;
  if (has_uavsdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->uavsdir_, output);
  }

  // required .scene.GDir gDir = 5;
  if (has_gdir()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->gdir_, output);
  }

  // required .scene.A a = 6;
  if (has_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->a_, output);
  }

  // required .scene.B b = 7;
  if (has_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->b_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:scene.Scene)
}

::google::protobuf::uint8* Scene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:scene.Scene)
  // required .scene.Uavs uavs = 1;
  if (has_uavs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->uavs_, false, target);
  }

  // required .scene.DynamicObstacles dos = 2;
  if (has_dos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->dos_, false, target);
  }

  // required .scene.StaticObstacles sos = 3;
  if (has_sos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sos_, false, target);
  }

  // required .scene.UavsDir uavsDir = 4;
  if (has_uavsdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->uavsdir_, false, target);
  }

  // required .scene.GDir gDir = 5;
  if (has_gdir()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->gdir_, false, target);
  }

  // required .scene.A a = 6;
  if (has_a()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->a_, false, target);
  }

  // required .scene.B b = 7;
  if (has_b()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->b_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:scene.Scene)
  return target;
}

int Scene::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:scene.Scene)
  int total_size = 0;

  if (has_uavs()) {
    // required .scene.Uavs uavs = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uavs_);
  }

  if (has_dos()) {
    // required .scene.DynamicObstacles dos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dos_);
  }

  if (has_sos()) {
    // required .scene.StaticObstacles sos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sos_);
  }

  if (has_uavsdir()) {
    // required .scene.UavsDir uavsDir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uavsdir_);
  }

  if (has_gdir()) {
    // required .scene.GDir gDir = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdir_);
  }

  if (has_a()) {
    // required .scene.A a = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->a_);
  }

  if (has_b()) {
    // required .scene.B b = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->b_);
  }

  return total_size;
}
int Scene::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:scene.Scene)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .scene.Uavs uavs = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uavs_);

    // required .scene.DynamicObstacles dos = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dos_);

    // required .scene.StaticObstacles sos = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sos_);

    // required .scene.UavsDir uavsDir = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->uavsdir_);

    // required .scene.GDir gDir = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gdir_);

    // required .scene.A a = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->a_);

    // required .scene.B b = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->b_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Scene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:scene.Scene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Scene* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Scene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:scene.Scene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:scene.Scene)
    MergeFrom(*source);
  }
}

void Scene::MergeFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:scene.Scene)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uavs()) {
      mutable_uavs()->::scene::Uavs::MergeFrom(from.uavs());
    }
    if (from.has_dos()) {
      mutable_dos()->::scene::DynamicObstacles::MergeFrom(from.dos());
    }
    if (from.has_sos()) {
      mutable_sos()->::scene::StaticObstacles::MergeFrom(from.sos());
    }
    if (from.has_uavsdir()) {
      mutable_uavsdir()->::scene::UavsDir::MergeFrom(from.uavsdir());
    }
    if (from.has_gdir()) {
      mutable_gdir()->::scene::GDir::MergeFrom(from.gdir());
    }
    if (from.has_a()) {
      mutable_a()->::scene::A::MergeFrom(from.a());
    }
    if (from.has_b()) {
      mutable_b()->::scene::B::MergeFrom(from.b());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Scene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:scene.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Scene::CopyFrom(const Scene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:scene.Scene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scene::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_uavs()) {
    if (!this->uavs_->IsInitialized()) return false;
  }
  if (has_dos()) {
    if (!this->dos_->IsInitialized()) return false;
  }
  if (has_sos()) {
    if (!this->sos_->IsInitialized()) return false;
  }
  if (has_uavsdir()) {
    if (!this->uavsdir_->IsInitialized()) return false;
  }
  if (has_gdir()) {
    if (!this->gdir_->IsInitialized()) return false;
  }
  if (has_a()) {
    if (!this->a_->IsInitialized()) return false;
  }
  if (has_b()) {
    if (!this->b_->IsInitialized()) return false;
  }
  return true;
}

void Scene::Swap(Scene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Scene::InternalSwap(Scene* other) {
  std::swap(uavs_, other->uavs_);
  std::swap(dos_, other->dos_);
  std::swap(sos_, other->sos_);
  std::swap(uavsdir_, other->uavsdir_);
  std::swap(gdir_, other->gdir_);
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Scene::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Scene_descriptor_;
  metadata.reflection = Scene_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Scene

// required .scene.Uavs uavs = 1;
bool Scene::has_uavs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Scene::set_has_uavs() {
  _has_bits_[0] |= 0x00000001u;
}
void Scene::clear_has_uavs() {
  _has_bits_[0] &= ~0x00000001u;
}
void Scene::clear_uavs() {
  if (uavs_ != NULL) uavs_->::scene::Uavs::Clear();
  clear_has_uavs();
}
const ::scene::Uavs& Scene::uavs() const {
  // @@protoc_insertion_point(field_get:scene.Scene.uavs)
  return uavs_ != NULL ? *uavs_ : *default_instance_->uavs_;
}
::scene::Uavs* Scene::mutable_uavs() {
  set_has_uavs();
  if (uavs_ == NULL) {
    uavs_ = new ::scene::Uavs;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.uavs)
  return uavs_;
}
::scene::Uavs* Scene::release_uavs() {
  // @@protoc_insertion_point(field_release:scene.Scene.uavs)
  clear_has_uavs();
  ::scene::Uavs* temp = uavs_;
  uavs_ = NULL;
  return temp;
}
void Scene::set_allocated_uavs(::scene::Uavs* uavs) {
  delete uavs_;
  uavs_ = uavs;
  if (uavs) {
    set_has_uavs();
  } else {
    clear_has_uavs();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.uavs)
}

// required .scene.DynamicObstacles dos = 2;
bool Scene::has_dos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Scene::set_has_dos() {
  _has_bits_[0] |= 0x00000002u;
}
void Scene::clear_has_dos() {
  _has_bits_[0] &= ~0x00000002u;
}
void Scene::clear_dos() {
  if (dos_ != NULL) dos_->::scene::DynamicObstacles::Clear();
  clear_has_dos();
}
const ::scene::DynamicObstacles& Scene::dos() const {
  // @@protoc_insertion_point(field_get:scene.Scene.dos)
  return dos_ != NULL ? *dos_ : *default_instance_->dos_;
}
::scene::DynamicObstacles* Scene::mutable_dos() {
  set_has_dos();
  if (dos_ == NULL) {
    dos_ = new ::scene::DynamicObstacles;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.dos)
  return dos_;
}
::scene::DynamicObstacles* Scene::release_dos() {
  // @@protoc_insertion_point(field_release:scene.Scene.dos)
  clear_has_dos();
  ::scene::DynamicObstacles* temp = dos_;
  dos_ = NULL;
  return temp;
}
void Scene::set_allocated_dos(::scene::DynamicObstacles* dos) {
  delete dos_;
  dos_ = dos;
  if (dos) {
    set_has_dos();
  } else {
    clear_has_dos();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.dos)
}

// required .scene.StaticObstacles sos = 3;
bool Scene::has_sos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Scene::set_has_sos() {
  _has_bits_[0] |= 0x00000004u;
}
void Scene::clear_has_sos() {
  _has_bits_[0] &= ~0x00000004u;
}
void Scene::clear_sos() {
  if (sos_ != NULL) sos_->::scene::StaticObstacles::Clear();
  clear_has_sos();
}
const ::scene::StaticObstacles& Scene::sos() const {
  // @@protoc_insertion_point(field_get:scene.Scene.sos)
  return sos_ != NULL ? *sos_ : *default_instance_->sos_;
}
::scene::StaticObstacles* Scene::mutable_sos() {
  set_has_sos();
  if (sos_ == NULL) {
    sos_ = new ::scene::StaticObstacles;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.sos)
  return sos_;
}
::scene::StaticObstacles* Scene::release_sos() {
  // @@protoc_insertion_point(field_release:scene.Scene.sos)
  clear_has_sos();
  ::scene::StaticObstacles* temp = sos_;
  sos_ = NULL;
  return temp;
}
void Scene::set_allocated_sos(::scene::StaticObstacles* sos) {
  delete sos_;
  sos_ = sos;
  if (sos) {
    set_has_sos();
  } else {
    clear_has_sos();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.sos)
}

// required .scene.UavsDir uavsDir = 4;
bool Scene::has_uavsdir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Scene::set_has_uavsdir() {
  _has_bits_[0] |= 0x00000008u;
}
void Scene::clear_has_uavsdir() {
  _has_bits_[0] &= ~0x00000008u;
}
void Scene::clear_uavsdir() {
  if (uavsdir_ != NULL) uavsdir_->::scene::UavsDir::Clear();
  clear_has_uavsdir();
}
const ::scene::UavsDir& Scene::uavsdir() const {
  // @@protoc_insertion_point(field_get:scene.Scene.uavsDir)
  return uavsdir_ != NULL ? *uavsdir_ : *default_instance_->uavsdir_;
}
::scene::UavsDir* Scene::mutable_uavsdir() {
  set_has_uavsdir();
  if (uavsdir_ == NULL) {
    uavsdir_ = new ::scene::UavsDir;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.uavsDir)
  return uavsdir_;
}
::scene::UavsDir* Scene::release_uavsdir() {
  // @@protoc_insertion_point(field_release:scene.Scene.uavsDir)
  clear_has_uavsdir();
  ::scene::UavsDir* temp = uavsdir_;
  uavsdir_ = NULL;
  return temp;
}
void Scene::set_allocated_uavsdir(::scene::UavsDir* uavsdir) {
  delete uavsdir_;
  uavsdir_ = uavsdir;
  if (uavsdir) {
    set_has_uavsdir();
  } else {
    clear_has_uavsdir();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.uavsDir)
}

// required .scene.GDir gDir = 5;
bool Scene::has_gdir() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Scene::set_has_gdir() {
  _has_bits_[0] |= 0x00000010u;
}
void Scene::clear_has_gdir() {
  _has_bits_[0] &= ~0x00000010u;
}
void Scene::clear_gdir() {
  if (gdir_ != NULL) gdir_->::scene::GDir::Clear();
  clear_has_gdir();
}
const ::scene::GDir& Scene::gdir() const {
  // @@protoc_insertion_point(field_get:scene.Scene.gDir)
  return gdir_ != NULL ? *gdir_ : *default_instance_->gdir_;
}
::scene::GDir* Scene::mutable_gdir() {
  set_has_gdir();
  if (gdir_ == NULL) {
    gdir_ = new ::scene::GDir;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.gDir)
  return gdir_;
}
::scene::GDir* Scene::release_gdir() {
  // @@protoc_insertion_point(field_release:scene.Scene.gDir)
  clear_has_gdir();
  ::scene::GDir* temp = gdir_;
  gdir_ = NULL;
  return temp;
}
void Scene::set_allocated_gdir(::scene::GDir* gdir) {
  delete gdir_;
  gdir_ = gdir;
  if (gdir) {
    set_has_gdir();
  } else {
    clear_has_gdir();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.gDir)
}

// required .scene.A a = 6;
bool Scene::has_a() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Scene::set_has_a() {
  _has_bits_[0] |= 0x00000020u;
}
void Scene::clear_has_a() {
  _has_bits_[0] &= ~0x00000020u;
}
void Scene::clear_a() {
  if (a_ != NULL) a_->::scene::A::Clear();
  clear_has_a();
}
const ::scene::A& Scene::a() const {
  // @@protoc_insertion_point(field_get:scene.Scene.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
::scene::A* Scene::mutable_a() {
  set_has_a();
  if (a_ == NULL) {
    a_ = new ::scene::A;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.a)
  return a_;
}
::scene::A* Scene::release_a() {
  // @@protoc_insertion_point(field_release:scene.Scene.a)
  clear_has_a();
  ::scene::A* temp = a_;
  a_ = NULL;
  return temp;
}
void Scene::set_allocated_a(::scene::A* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.a)
}

// required .scene.B b = 7;
bool Scene::has_b() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Scene::set_has_b() {
  _has_bits_[0] |= 0x00000040u;
}
void Scene::clear_has_b() {
  _has_bits_[0] &= ~0x00000040u;
}
void Scene::clear_b() {
  if (b_ != NULL) b_->::scene::B::Clear();
  clear_has_b();
}
const ::scene::B& Scene::b() const {
  // @@protoc_insertion_point(field_get:scene.Scene.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
::scene::B* Scene::mutable_b() {
  set_has_b();
  if (b_ == NULL) {
    b_ = new ::scene::B;
  }
  // @@protoc_insertion_point(field_mutable:scene.Scene.b)
  return b_;
}
::scene::B* Scene::release_b() {
  // @@protoc_insertion_point(field_release:scene.Scene.b)
  clear_has_b();
  ::scene::B* temp = b_;
  b_ = NULL;
  return temp;
}
void Scene::set_allocated_b(::scene::B* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:scene.Scene.b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace scene

// @@protoc_insertion_point(global_scope)
